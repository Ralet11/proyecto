html
  head
    title Chat con Socket.io y Bootstrap
    link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css")
    script(src="/socket.io/socket.io.js")
    script(src="https://code.jquery.com/jquery-3.7.0.min.js" integrity="sha256-2Pmvv0kuTBOenSvLm6bvfBSSHrUJ+3A7x6P5Ebd07/g=" crossorigin="anonymous")
    script(src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js")
    style.
      body {
        background: linear-gradient(45deg, #171738, #1A2342, #1B2A4F);
      }

      .chat-window {
        height: 300px;
        overflow-y: scroll;
        background-color: #2d2d2d;
        border: 1px solid #ccc;
        padding: 10px;
        margin-bottom: 10px;
        color: #ffffff
      }

      .private-message {
        font-weight: italic;
        color: #2D7AC0;
      }

      .nav {
        display: flex;
        justify-content: flex-end;
        align-items: center;
        padding: 10px;
        background-color: #f1f1f1;
      }

      .cart-button {
        background-color: #4caf50;
        color: white;
        padding: 10px 20px 10px 10px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
      }

      .cart-button:hover {
        background-color: #45a049;
      }

      .chat-button {
        background-color: #109DFA;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-left: 10px;
        margin-right: 10px;
      }

      .chat-button:hover {
        background-color: #109DDA;
      }
      #user-list {
            color: #ffffff;
        }
      h1, h3 {
        color: #ffffff
      }

    body
      div.nav
        button.cart-button(onclick="outCart()") Volver a productos
        button.chat-button(onclick="openChatPersonal()") Mis Chats
      .container
        .row
          .col-md-6.offset-md-3
            h1 Chat en tiempo real con Socket.io y Bootstrap
            hr
            .row
              .col-md-8
                .chat-window#chat-messages
                  // Aquí se mostrarán los mensajes
              .col-md-4
                h3 Lista de usuarios
                ul#user-list.list-group
                  // Aquí se mostrará la lista de usuarios
            form#chat-form
              .form-group
                input.form-control(type="text" id="message-input" placeholder="Escribe tu mensaje")
              button.btn.btn-primary(type="submit") Enviar

    script.
        function outCart() {
            window.location.href = "/api/products";
        }

        const user = !{JSON.stringify(user)}
        
        function openChatPersonal() {
            const userEmail = "#{user.email}"; // Obtiene el valor de user.email del objeto user pasado desde el backend
            window.location.href = `/api/chat/${userEmail}`;
        }
        $(function() {
            const socket = io();

            const chatForm = $("#chat-form");
            const chatText = $("#message-input");
            const chatMessages = $("#chat-messages");
            const userList = $("#user-list");

            ; // Obtén el objeto user desde el servidor

            socket.emit("join", user.email); // Envía el nombre de usuario al servidor

            chatForm.on("submit", e => {
            e.preventDefault();
            const message = chatText.val();
            socket.emit("send message", message); // Envía el mensaje al servidor
            chatText.val("");
            });

            socket.on("new message", function(data) {
            const { username, message } = data;
            const messageWithUsername = `<strong>${username}:</strong> ${message}`;
            chatMessages.append(`<p>${messageWithUsername}</p>`); // Agrega el mensaje con el nombre de usuario al contenedor de mensajes
            });

            socket.on("user joined", function(users) {
            userList.html(""); // Borra la lista de usuarios conectados
            users.forEach(user => {
                userList.append(`<li>${user}</li>`); // Agrega cada usuario a la lista
            });
            });

            socket.on("user left", function(users) {
            userList.html(""); // Borra la lista de usuarios conectados
            users.forEach(user => {
                userList.append(`<li>${user}</li>`); // Agrega cada usuario a la lista
            });
            });

            socket.on("private message", data => {
              const { sender, message } = data;
              const messageWithUsername = `<strong>${sender}:</strong> ${message}`;
              const privateMessage = `<p class="private-message">${messageWithUsername}</p>`;
              chatMessages.append(privateMessage); // Agrega el mensaje privado al contenedor de mensajes con una clase especial para el estilo
            });

            socket.on("error", errorMessage => {
                const errorMessageWithStyle = `<strong style="color: red;">Error:</strong> ${errorMessage}`;
                const error = `<p class="error-message">${errorMessageWithStyle}</p>`;
                chatMessages.append(error); // Agrega el mensaje de error al contenedor de mensajes con una clase especial para el estilo
                });
            socket.on("old chats", function(oldMessages) {
                oldMessages.forEach(function(message) {
                    console.log(message.name)
                    const username = message.name;
                    const msg = message.msg;
                    const messageWithUsername = `<strong>${username}:</strong> ${msg}`;
                    chatMessages.append(`<p>${messageWithUsername}</p>`);
                });
                });
        })    
